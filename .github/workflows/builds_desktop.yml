#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Desktop CI builds"
on:
  push:
  pull_request:
  workflow_dispatch:

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  APP_NAME: "Theengs"
  APP_VERSION: "1.4.1"
  QT_VERSION: "6.6.3"

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  ## GNU/Linux build ###########################################################
  build-linux:
    name: "Linux CI build"
    runs-on: ubuntu-20.04
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtconnectivity qtwebsockets qtcharts qtshadertools qt5compat

      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
             sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-dev libx11-xcb-dev libxcb-cursor0 libzstd-dev -y;
             sudo apt-get install cmake ninja-build pkgconf libtool appstream -y;

      # Build dependencies (from contribs script)
      - name: Build dependencies (from contribs script)
        run: |
             cd contribs/
             python3 contribs_builder.py --targets=linux --qt-directory ${{env.QT_ROOT_DIR}}/../.. --qt-version ${{env.QT_VERSION}}
             cd ..

      # Setup env
      - name: Setup env
        run: |
             qmake --version
             sudo rm /home/runner/work/${{env.APP_NAME}}/Qt/${{env.QT_VERSION}}/gcc_64/plugins/sqldrivers/libqsqlmimer.so

      # Build application
      - name: Build application
        run: |
             qmake ${{env.APP_NAME}}.pro CONFIG+=release PREFIX=/usr
             make -j$(nproc)

      # Deploy application
      - name: Deploy application
        run: ./deploy_linux.sh -c -i -p

      # Upload AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-linux64.AppImage
          retention-days: 1

  ## macOS build ###############################################################
  build-mac:
    name: "macOS CI build"
    runs-on: macos-12
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install dependencies (from package manager)
      #- name: Install dependencies (from package manager)
      #  run: |
      #       brew install qt6 cmake

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtconnectivity qtwebsockets qtcharts qtshadertools qt5compat

      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
             brew install ninja automake autoconf libtool pkg-config

      # Build dependencies (from contribs script)
      - name: Build dependencies (from contribs script)
        run: |
             cd contribs/
             python3 contribs_builder.py --targets=macos --qt-directory ${{env.QT_ROOT_DIR}}/../.. --qt-version ${{env.QT_VERSION}}
             cd ..

      # Setup env
      - name: Setup env
        run: |
             qmake --version

      # Build application
      - name: Build application
        run: |
             qmake ${{env.APP_NAME}}.pro CONFIG+=release
             make -j`sysctl -n hw.logicalcpu`

      # Deploy application
      - name: Deploy application
        run: ./deploy_macos.sh -c -p

      # Upload app ZIP
      - name: Upload app ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-macOS.zip
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-macOS.zip
          retention-days: 1

  ## Windows build #############################################################
  build-windows:
    name: "Windows CI build"
    runs-on: windows-2022
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Configure MSVC
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtconnectivity qtwebsockets qtcharts qtshadertools qt5compat

      # Install NSIS (already installed in 'windows-2022')
      #- name: Install NSIS
      #  run: |
      #       Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
      #       scoop bucket add extras
      #       scoop install nsis

      # Build dependencies (from contribs script)
      - name: Build dependencies (from contribs script)
        run: |
             cd contribs/
             python3 contribs_builder.py --targets=msvc2019 --qt-directory ${{env.QT_ROOT_DIR}}/../.. --qt-version ${{env.QT_VERSION}}
             cd ..

      # Setup env
      - name: Setup env
        run: |
             qmake --version

      # Build application
      - name: Build application
        run: |
             qmake ${{env.APP_NAME}}.pro CONFIG+=release
             nmake

      # Deploy application
      - name: Deploy application
        run: sh deploy_windows.sh -c -p

      # Upload app ZIP
      - name: Upload app ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.zip
          retention-days: 1

      # Upload NSIS installer
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
          path: ${{env.APP_NAME}}-${{env.APP_VERSION}}-win64.exe
          retention-days: 1
